From ac78be4de06f43a8d9d993a6c3d34d6cf7462123 Mon Sep 17 00:00:00 2001
From: 7Ji <pugokushin@gmail.com>
Date: Tue, 9 Aug 2022 11:32:34 +0800
Subject: [PATCH] mali-fbdev: add driver

---
 CMakeLists.txt                          |   2 +
 cmake/sdlchecks.cmake                   |  22 ++
 configure                               |  53 +++++
 configure.ac                            |  30 +++
 include/SDL_config.h.cmake              |   1 +
 include/SDL_config.h.in                 |   1 +
 src/video/SDL_egl.c                     |   2 +-
 src/video/SDL_sysvideo.h                |   1 +
 src/video/SDL_video.c                   |   3 +
 src/video/mali-fbdev/SDL_maliopengles.c |  20 ++
 src/video/mali-fbdev/SDL_maliopengles.h |  26 +++
 src/video/mali-fbdev/SDL_malivideo.c    | 293 ++++++++++++++++++++++++
 src/video/mali-fbdev/SDL_malivideo.h    |  54 +++++
 13 files changed, 507 insertions(+), 1 deletion(-)
 create mode 100644 src/video/mali-fbdev/SDL_maliopengles.c
 create mode 100644 src/video/mali-fbdev/SDL_maliopengles.h
 create mode 100644 src/video/mali-fbdev/SDL_malivideo.c
 create mode 100644 src/video/mali-fbdev/SDL_malivideo.h

diff -u -r a/CMakeLists.txt ./src/CMakeLists.txt
--- a/CMakeLists.txt    2022-12-05 15:31:00.425067600 +0100
+++ ./src/CMakeLists.txt        2022-12-05 15:33:51.359353512 +0100
@@ -449,6 +449,7 @@
 dep_option(SDL_VULKAN              "Enable Vulkan support" ON "ANDROID OR APPLE OR LINUX OR WINDOWS" OFF)
 set_option(SDL_METAL               "Enable Metal support" ${APPLE})
 set_option(SDL_KMSDRM              "Use KMS DRM video driver" ${UNIX_SYS})
+set_option(SDL_MALI                "Use Mali EGL video driver" ${UNIX_SYS})
 dep_option(SDL_KMSDRM_SHARED       "Dynamically load KMS DRM support" ON "SDL_KMSDRM" OFF)
 set_option(SDL_OFFSCREEN           "Use offscreen video driver" ON)
 option_string(SDL_BACKGROUNDING_SIGNAL "number to use for magic backgrounding signal or 'OFF'" OFF)
@@ -1425,6 +1426,7 @@
     CheckOpenGLES()
     CheckWayland()
     CheckVivante()
+       CheckMali()
     # FIXME: implement CheckVulkan()
     if(SDL_VULKAN)
       set(SDL_VIDEO_VULKAN 1)
diff --git a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
index 8dcb39265..f1fef801d 100644
--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -771,6 +771,28 @@ macro(CheckDirectFB)
   endif()
 endmacro()
 
+# Requires:
+# - n/a
+macro(CheckMali)
+  if(SDL_MALI)
+    check_c_source_compiles("
+        #define LINUX
+        #define EGL_API_FB
+        #include <EGL/egl.h>
+        int main(int argc, char** argv) {}" HAVE_MALI_EGL_FB)
+    if(HAVE_MALI_EGL_FB)
+      set(HAVE_MALI TRUE)
+      set(HAVE_SDL_VIDEO TRUE)
+
+      file(GLOB MALI_SOURCES ${SDL2_SOURCE_DIR}/src/video/mali-fbdev/*.c)
+      set(SOURCE_FILES ${SOURCE_FILES} ${MALI_SOURCES})
+      set(SDL_VIDEO_DRIVER_MALI 1)
+      set(SDL_CFLAGS "${SDL_CFLAGS} -DLINUX -DEGL_API_FB")
+      list(APPEND EXTRA_LIBS EGL)
+    endif()
+  endif()
+endmacro()
+
 # Requires:
 # - n/a
 macro(CheckVivante)
diff --git a/configure b/configure
index f3ea813eb..94f85020f 100755
--- a/configure
+++ b/configure
@@ -886,6 +886,7 @@ enable_video_x11_scrnsaver
 enable_video_x11_xshape
 enable_video_x11_vm
 enable_video_vivante
+enable_video_mali
 enable_video_cocoa
 enable_video_metal
 enable_render_metal
@@ -1684,6 +1685,7 @@ Optional Features:
                           enable X11 XShape support [default=yes]
   --enable-video-x11-vm   use X11 VM extension for fullscreen [default=yes]
   --enable-video-vivante  use Vivante EGL video driver [default=yes]
+  --enable-video-mali     use Mali EGL video driver [[default=yes]]
   --enable-video-cocoa    use Cocoa video driver [default=yes]
   --enable-video-metal    include Metal support [default=yes]
   --enable-render-metal   enable the Metal render driver [default=yes]
@@ -22685,6 +22687,56 @@ $as_echo "#define SDL_VIDEO_DRIVER_VIVANTE_VDK 1" >>confdefs.h
     fi
 }
 
+CheckMaliVideo()
+{
+    # Check whether --enable-video-mali was given.
+if test "${enable_video_mali+set}" = set; then :
+  enableval=$enable_video_mali;
+else
+  enable_video_mali=yes
+fi
+
+    if test x$enable_video = xyes -a x$enable_video_mali = xyes; then
+        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for Mali FB API" >&5
+$as_echo_n "checking for Mali FB API... " >&6; }
+        have_mali_egl=no
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+          #define LINUX
+          #define EGL_API_FB
+          #include <EGL/egl.h>
+
+int
+main ()
+{
+
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+        have_mali_egl=yes
+
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: $have_mali_egl" >&5
+$as_echo "$have_mali_egl" >&6; }
+
+        if test x$have_mali_egl = xyes; then
+
+$as_echo "#define SDL_VIDEO_DRIVER_MALI 1" >>confdefs.h
+
+            EXTRA_CFLAGS="$EXTRA_CFLAGS -DLINUX -DEGL_API_FB"
+            SOURCES="$SOURCES $srcdir/src/video/mali-fbdev/*.c"
+            SUMMARY_video="${SUMMARY_video} mali"
+            have_video=yes
+        fi
+    fi
+}
+
 CheckHaikuVideo()
 {
     if test x$enable_video = xyes; then
@@ -25955,6 +26007,7 @@ $as_echo "#define SDL_VIDEO_DRIVER_ANDROID 1" >>confdefs.h
         CheckLinuxVersion
         CheckRPATH
         CheckVivanteVideo
+        CheckMaliVideo
 
         # Set up files for the misc library
         if test x$enable_misc = xyes; then
diff --git a/configure.ac b/configure.ac
index 2209c04d7..23bbe4d54 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2162,6 +2162,35 @@ CheckVivanteVideo()
     fi
 }
 
+dnl Set up the Mali video driver if enabled
+CheckMaliVideo()
+{
+    AC_ARG_ENABLE(video-mali,
+AC_HELP_STRING([--enable-video-mali], [use Mali EGL video driver [[default=yes]]]),
+                  , enable_video_mali=yes)
+    if test x$enable_video = xyes -a x$enable_video_mali = xyes; then
+        AC_MSG_CHECKING(for Mali FB API)
+        have_mali_egl=no
+        AC_TRY_COMPILE([
+          #define LINUX
+          #define EGL_API_FB
+          #include <EGL/egl.h>
+        ],[
+        ],[
+        have_mali_egl=yes
+        ])
+        AC_MSG_RESULT($have_mali_egl)
+
+        if test x$have_mali_egl = xyes; then
+            AC_DEFINE(SDL_VIDEO_DRIVER_MALI, 1, [ ])
+            EXTRA_CFLAGS="$EXTRA_CFLAGS -DLINUX -DEGL_API_FB"
+            SOURCES="$SOURCES $srcdir/src/video/mali-fbdev/*.c"
+            SUMMARY_video="${SUMMARY_video} mali"
+            have_video=yes
+        fi
+    fi
+}
+
 dnl Set up the Haiku video driver if enabled
 CheckHaikuVideo()
 {
@@ -3747,6 +3776,7 @@ case "$host" in
         CheckLinuxVersion
         CheckRPATH
         CheckVivanteVideo
+        CheckMaliVideo
 
         # Set up files for the misc library
         if test x$enable_misc = xyes; then
diff --git a/include/SDL_config.h.cmake b/include/SDL_config.h.cmake
index fcd18e57d..e8844e003 100644
--- a/include/SDL_config.h.cmake
+++ b/include/SDL_config.h.cmake
@@ -400,6 +400,7 @@
 #cmakedefine SDL_VIDEO_DRIVER_RPI @SDL_VIDEO_DRIVER_RPI@
 #cmakedefine SDL_VIDEO_DRIVER_VIVANTE @SDL_VIDEO_DRIVER_VIVANTE@
 #cmakedefine SDL_VIDEO_DRIVER_VIVANTE_VDK @SDL_VIDEO_DRIVER_VIVANTE_VDK@
+#cmakedefine SDL_VIDEO_DRIVER_MALI @SDL_VIDEO_DRIVER_MALI@
 #cmakedefine SDL_VIDEO_DRIVER_OS2 @SDL_VIDEO_DRIVER_OS2@
 #cmakedefine SDL_VIDEO_DRIVER_QNX @SDL_VIDEO_DRIVER_QNX@
 #cmakedefine SDL_VIDEO_DRIVER_RISCOS @SDL_VIDEO_DRIVER_RISCOS@
diff --git a/include/SDL_config.h.in b/include/SDL_config.h.in
index f912e4112..420fa0e2e 100644
--- a/include/SDL_config.h.in
+++ b/include/SDL_config.h.in
@@ -383,6 +383,7 @@
 #undef SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC_GBM
 #undef SDL_VIDEO_DRIVER_ANDROID
 #undef SDL_VIDEO_DRIVER_EMSCRIPTEN
+#undef SDL_VIDEO_DRIVER_MALI
 #undef SDL_VIDEO_DRIVER_OFFSCREEN
 #undef SDL_VIDEO_DRIVER_X11_DYNAMIC
 #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT
diff --git a/src/video/SDL_egl.c b/src/video/SDL_egl.c
index e62fe9931..966c2cf65 100644
--- a/src/video/SDL_egl.c
+++ b/src/video/SDL_egl.c
@@ -59,7 +59,7 @@
 #define DEFAULT_OGL_ES_PVR ( vc4 ? "libGLES_CM.so.1" : "libbrcmGLESv2.so" )
 #define DEFAULT_OGL_ES ( vc4 ? "libGLESv1_CM.so.1" : "libbrcmGLESv2.so" )
 
-#elif SDL_VIDEO_DRIVER_ANDROID || SDL_VIDEO_DRIVER_VIVANTE
+#elif SDL_VIDEO_DRIVER_ANDROID || SDL_VIDEO_DRIVER_VIVANTE || SDL_VIDEO_DRIVER_MALI
 /* Android */
 #define DEFAULT_EGL "libEGL.so"
 #define DEFAULT_OGL_ES2 "libGLESv2.so"
diff --git a/src/video/SDL_sysvideo.h b/src/video/SDL_sysvideo.h
index 2384a64ac..5f4ead462 100644
--- a/src/video/SDL_sysvideo.h
+++ b/src/video/SDL_sysvideo.h
@@ -455,6 +455,7 @@ extern VideoBootStrap NACL_bootstrap;
 extern VideoBootStrap VIVANTE_bootstrap;
 extern VideoBootStrap Emscripten_bootstrap;
 extern VideoBootStrap QNX_bootstrap;
+extern VideoBootStrap MALI_bootstrap;
 extern VideoBootStrap OFFSCREEN_bootstrap;
 extern VideoBootStrap OS2DIVE_bootstrap;
 extern VideoBootStrap OS2VMAN_bootstrap;
diff --git a/src/video/SDL_video.c b/src/video/SDL_video.c
index 93c803e70..9611f432b 100644
--- a/src/video/SDL_video.c
+++ b/src/video/SDL_video.c
@@ -103,6 +103,9 @@ static VideoBootStrap *bootstrap[] = {
 #if SDL_VIDEO_DRIVER_RISCOS
     &RISCOS_bootstrap,
 #endif
+#if SDL_VIDEO_DRIVER_MALI
+    &MALI_bootstrap,
+#endif
 #if SDL_VIDEO_DRIVER_RPI
     &RPI_bootstrap,
 #endif
diff --git a/src/video/mali-fbdev/SDL_maliopengles.c b/src/video/mali-fbdev/SDL_maliopengles.c
new file mode 100644
index 000000000..e484a4778
--- /dev/null
+++ b/src/video/mali-fbdev/SDL_maliopengles.c
@@ -0,0 +1,20 @@
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_MALI && SDL_VIDEO_OPENGL_EGL
+
+#include "SDL_maliopengles.h"
+#include "SDL_malivideo.h"
+
+/* EGL implementation of SDL OpenGL support */
+
+int
+MALI_GLES_LoadLibrary(_THIS, const char *path)
+{
+    return SDL_EGL_LoadLibrary(_this, path, EGL_DEFAULT_DISPLAY, 0);
+}
+
+SDL_EGL_CreateContext_impl(MALI)
+SDL_EGL_SwapWindow_impl(MALI)
+SDL_EGL_MakeCurrent_impl(MALI)
+
+#endif /* SDL_VIDEO_DRIVER_MALI && SDL_VIDEO_OPENGL_EGL */
diff --git a/src/video/mali-fbdev/SDL_maliopengles.h b/src/video/mali-fbdev/SDL_maliopengles.h
new file mode 100644
index 000000000..639158f41
--- /dev/null
+++ b/src/video/mali-fbdev/SDL_maliopengles.h
@@ -0,0 +1,26 @@
+#include "../../SDL_internal.h"
+
+#ifndef _SDL_maliopengles_h
+#define _SDL_maliopengles_h
+
+#if SDL_VIDEO_DRIVER_MALI && SDL_VIDEO_OPENGL_EGL
+
+#include "../SDL_sysvideo.h"
+#include "../SDL_egl_c.h"
+
+/* OpenGLES functions */
+#define MALI_GLES_GetAttribute SDL_EGL_GetAttribute
+#define MALI_GLES_GetProcAddress SDL_EGL_GetProcAddress
+#define MALI_GLES_UnloadLibrary SDL_EGL_UnloadLibrary
+#define MALI_GLES_SetSwapInterval SDL_EGL_SetSwapInterval
+#define MALI_GLES_GetSwapInterval SDL_EGL_GetSwapInterval
+#define MALI_GLES_DeleteContext SDL_EGL_DeleteContext
+
+extern int MALI_GLES_LoadLibrary(_THIS, const char *path);
+extern SDL_GLContext MALI_GLES_CreateContext(_THIS, SDL_Window * window);
+extern int MALI_GLES_SwapWindow(_THIS, SDL_Window * window);
+extern int MALI_GLES_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context);
+
+#endif /* SDL_VIDEO_DRIVER_MALI && SDL_VIDEO_OPENGL_EGL */
+
+#endif
diff --git a/src/video/mali-fbdev/SDL_malivideo.c b/src/video/mali-fbdev/SDL_malivideo.c
new file mode 100644
index 000000000..557c13f67
--- /dev/null
+++ b/src/video/mali-fbdev/SDL_malivideo.c
@@ -0,0 +1,293 @@
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_MALI
+
+/* SDL internals */
+#include "../SDL_sysvideo.h"
+#include "SDL_version.h"
+#include "SDL_syswm.h"
+#include "SDL_loadso.h"
+#include "SDL_events.h"
+#include "../../events/SDL_events_c.h"
+
+#ifdef SDL_INPUT_LINUXEV
+#include "../../core/linux/SDL_evdev.h"
+#endif
+
+#include "SDL_malivideo.h"
+#include "SDL_maliopengles.h"
+
+static void
+MALI_Destroy(SDL_VideoDevice * device)
+{
+    if (device->driverdata != NULL) {
+        SDL_free(device->driverdata);
+        device->driverdata = NULL;
+    }
+}
+
+static SDL_VideoDevice *
+MALI_Create()
+{
+    SDL_VideoDevice *device;
+
+    /* Initialize SDL_VideoDevice structure */
+    device = (SDL_VideoDevice *) SDL_calloc(1, sizeof(SDL_VideoDevice));
+    if (device == NULL) {
+        SDL_OutOfMemory();
+        return NULL;
+    }
+
+    device->driverdata = NULL;
+
+    /* Setup amount of available displays and current display */
+    device->num_displays = 0;
+
+    /* Set device free function */
+    device->free = MALI_Destroy;
+
+    /* Setup all functions which we can handle */
+    device->VideoInit = MALI_VideoInit;
+    device->VideoQuit = MALI_VideoQuit;
+    device->GetDisplayModes = MALI_GetDisplayModes;
+    device->SetDisplayMode = MALI_SetDisplayMode;
+    device->CreateSDLWindow = MALI_CreateWindow;
+    device->SetWindowTitle = MALI_SetWindowTitle;
+    device->SetWindowPosition = MALI_SetWindowPosition;
+    device->SetWindowSize = MALI_SetWindowSize;
+    device->ShowWindow = MALI_ShowWindow;
+    device->HideWindow = MALI_HideWindow;
+    device->DestroyWindow = MALI_DestroyWindow;
+    device->GetWindowWMInfo = MALI_GetWindowWMInfo;
+
+    device->GL_LoadLibrary = MALI_GLES_LoadLibrary;
+    device->GL_GetProcAddress = MALI_GLES_GetProcAddress;
+    device->GL_UnloadLibrary = MALI_GLES_UnloadLibrary;
+    device->GL_CreateContext = MALI_GLES_CreateContext;
+    device->GL_MakeCurrent = MALI_GLES_MakeCurrent;
+    device->GL_SetSwapInterval = MALI_GLES_SetSwapInterval;
+    device->GL_GetSwapInterval = MALI_GLES_GetSwapInterval;
+    device->GL_SwapWindow = MALI_GLES_SwapWindow;
+    device->GL_DeleteContext = MALI_GLES_DeleteContext;
+
+    device->PumpEvents = MALI_PumpEvents;
+
+    return device;
+}
+
+VideoBootStrap MALI_bootstrap = {
+    "mali",
+    "Mali EGL Video Driver",
+    MALI_Create
+};
+
+/*****************************************************************************/
+/* SDL Video and Display initialization/handling functions                   */
+/*****************************************************************************/
+
+int
+MALI_VideoInit(_THIS)
+{
+    struct fb_var_screeninfo vinfo;
+    int fd;
+    SDL_VideoDisplay display;
+    SDL_DisplayMode current_mode;
+    SDL_DisplayData *data;
+
+    data = (SDL_DisplayData *) SDL_calloc(1, sizeof(SDL_DisplayData));
+    if (data == NULL) {
+        return SDL_OutOfMemory();
+    }
+
+    fd = open("/dev/fb0", O_RDWR, 0);
+    if (fd < 0) {
+        return SDL_SetError("mali-fbdev: Could not open framebuffer device");
+    }
+
+    if (ioctl(fd, FBIOGET_VSCREENINFO, &vinfo) < 0) {
+        MALI_VideoQuit(_this);
+        return SDL_SetError("mali-fbdev: Could not get framebuffer information");
+    }
+    /* Enable triple buffering */
+    /*
+    vinfo.yres_virtual = vinfo.yres * 3;
+    if (ioctl(fd, FBIOPUT_VSCREENINFO, vinfo) == -1) {
+	printf("mali-fbdev: Error setting VSCREENINFO\n");
+    }
+    */
+    close(fd);
+    system("setterm -cursor off");
+
+    data->native_display.width = vinfo.xres;
+    data->native_display.height = vinfo.yres;
+
+    SDL_zero(current_mode);
+    current_mode.w = vinfo.xres;
+    current_mode.h = vinfo.yres;
+    /* FIXME: Is there a way to tell the actual refresh rate? */
+    current_mode.refresh_rate = 60;
+    /* 32 bpp for default */
+    //current_mode.format = SDL_PIXELFORMAT_ABGR8888;
+    current_mode.format = SDL_PIXELFORMAT_RGBX8888;
+
+    current_mode.driverdata = NULL;
+
+    SDL_zero(display);
+    display.desktop_mode = current_mode;
+    display.current_mode = current_mode;
+    display.driverdata = data;
+
+    SDL_AddVideoDisplay(&display, SDL_FALSE);
+
+#ifdef SDL_INPUT_LINUXEV
+    if (SDL_EVDEV_Init() < 0) {
+        return -1;
+    }
+#endif
+
+    return 0;
+}
+
+void
+MALI_VideoQuit(_THIS)
+{
+    /* Clear the framebuffer and ser cursor on again */
+    int fd = open("/dev/tty", O_RDWR);
+    ioctl(fd, VT_ACTIVATE, 5);
+    ioctl(fd, VT_ACTIVATE, 1);
+    close(fd);
+    system("setterm -cursor on");
+
+#ifdef SDL_INPUT_LINUXEV
+    SDL_EVDEV_Quit();
+#endif
+
+}
+
+void
+MALI_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
+{
+    /* Only one display mode available, the current one */
+    SDL_AddDisplayMode(display, &display->current_mode);
+}
+
+int
+MALI_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
+{
+    return 0;
+}
+
+int
+MALI_CreateWindow(_THIS, SDL_Window * window)
+{
+    SDL_WindowData *windowdata;
+    SDL_DisplayData *displaydata;
+
+    displaydata = SDL_GetDisplayDriverData(0);
+
+    /* Allocate window internal data */
+    windowdata = (SDL_WindowData *) SDL_calloc(1, sizeof(SDL_WindowData));
+    if (windowdata == NULL) {
+        return SDL_OutOfMemory();
+    }
+
+    /* Windows have one size for now */
+    window->w = displaydata->native_display.width;
+    window->h = displaydata->native_display.height;
+
+    /* OpenGL ES is the law here */
+    window->flags |= SDL_WINDOW_OPENGL;
+
+    if (!_this->egl_data) {
+        if (SDL_GL_LoadLibrary(NULL) < 0) {
+            return -1;
+        }
+    }
+    windowdata->egl_surface = SDL_EGL_CreateSurface(_this, (NativeWindowType) &displaydata->native_display);
+
+    if (windowdata->egl_surface == EGL_NO_SURFACE) {
+        MALI_VideoQuit(_this);
+        return SDL_SetError("mali-fbdev: Can't create EGL window surface");
+    }
+
+    /* Setup driver data for this window */
+    window->driverdata = windowdata;
+
+    /* One window, it always has focus */
+    SDL_SetMouseFocus(window);
+    SDL_SetKeyboardFocus(window);
+
+    /* Window has been successfully created */
+    return 0;
+}
+
+void
+MALI_DestroyWindow(_THIS, SDL_Window * window)
+{
+    SDL_WindowData *data;
+
+    data = window->driverdata;
+    if (data) {
+        if (data->egl_surface != EGL_NO_SURFACE) {
+            SDL_EGL_DestroySurface(_this, data->egl_surface);
+            data->egl_surface = EGL_NO_SURFACE;
+        }
+        SDL_free(data);
+    }
+    window->driverdata = NULL;
+}
+
+void
+MALI_SetWindowTitle(_THIS, SDL_Window * window)
+{
+}
+
+void
+MALI_SetWindowPosition(_THIS, SDL_Window * window)
+{
+}
+
+void
+MALI_SetWindowSize(_THIS, SDL_Window * window)
+{
+}
+
+void
+MALI_ShowWindow(_THIS, SDL_Window * window)
+{
+}
+
+void
+MALI_HideWindow(_THIS, SDL_Window * window)
+{
+}
+
+/*****************************************************************************/
+/* SDL Window Manager function                                               */
+/*****************************************************************************/
+SDL_bool
+MALI_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
+{
+    if (info->version.major <= SDL_MAJOR_VERSION) {
+        return SDL_TRUE;
+    } else {
+        SDL_SetError("application not compiled with SDL %d.%d\n",
+            SDL_MAJOR_VERSION, SDL_MINOR_VERSION);
+    }
+
+    /* Failed to get window manager information */
+    return SDL_FALSE;
+}
+
+/*****************************************************************************/
+/* SDL event functions                                                       */
+/*****************************************************************************/
+void MALI_PumpEvents(_THIS)
+{
+#ifdef SDL_INPUT_LINUXEV
+    SDL_EVDEV_Poll();
+#endif
+}
+
+#endif /* SDL_VIDEO_DRIVER_MALI */
+
diff --git a/src/video/mali-fbdev/SDL_malivideo.h b/src/video/mali-fbdev/SDL_malivideo.h
new file mode 100644
index 000000000..65c81d9a4
--- /dev/null
+++ b/src/video/mali-fbdev/SDL_malivideo.h
@@ -0,0 +1,54 @@
+#ifndef _SDL_malivideo_h
+#define _SDL_malivideo_h
+
+#include "../../SDL_internal.h"
+#include "../SDL_sysvideo.h"
+
+#include "SDL_egl.h"
+
+#include <EGL/egl.h>
+#include <linux/vt.h>
+#include <linux/fb.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdlib.h>
+
+typedef struct SDL_DisplayData
+{
+    struct fbdev_window native_display;
+} SDL_DisplayData;
+
+typedef struct SDL_WindowData
+{
+    EGLSurface egl_surface;
+} SDL_WindowData;
+
+/****************************************************************************/
+/* SDL_VideoDevice functions declaration                                    */
+/****************************************************************************/
+
+/* Display and window functions */
+int MALI_VideoInit(_THIS);
+void MALI_VideoQuit(_THIS);
+void MALI_GetDisplayModes(_THIS, SDL_VideoDisplay * display);
+int MALI_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode);
+int MALI_CreateWindow(_THIS, SDL_Window * window);
+void MALI_SetWindowTitle(_THIS, SDL_Window * window);
+void MALI_SetWindowPosition(_THIS, SDL_Window * window);
+void MALI_SetWindowSize(_THIS, SDL_Window * window);
+void MALI_ShowWindow(_THIS, SDL_Window * window);
+void MALI_HideWindow(_THIS, SDL_Window * window);
+void MALI_DestroyWindow(_THIS, SDL_Window * window);
+
+/* Window manager function */
+SDL_bool MALI_GetWindowWMInfo(_THIS, SDL_Window * window,
+                             struct SDL_SysWMinfo *info);
+
+/* Event functions */
+void MALI_PumpEvents(_THIS);
+
+#endif /* _SDL_malivideo_h */
+
-- 
2.37.1

